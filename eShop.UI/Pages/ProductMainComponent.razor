@using AutoMapper
@using eShop.UI.Storage.Services
@inject IStorageService Storage //behöver vi denna raden?
@inject IMapper mapper

<section class="d-flex flex-wrap">
    @foreach(var product in Service!.Products)
    {
        <div class="card mb-3" style="max-width: 500px;">
            <div class="row g-0">
                <div class="col-md-4">
                    <img src="@product.PictureURL" class="img-fluid rounded-start" alt="...">
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description.Truncate(300)</p>
                    </div>
                </div>
            </div>
            <div class="d-flex card-footer bg-white g-0 justify-content-start">
                @if (product.Sizes!.Count > 0)
                {
                    <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                        @foreach (var size in product.Sizes)
                        {
                            <input type="radio" class="btn-check" name="btnradio" 
                                id="size-@product.Id-@size.Id"
                                @onclick="() => OnSizeClick(product, size)"
                                autocomplete="off" checked>
                           // <label class="btn btn-outline-primary btn-radio"
                            <label class="btn btn-sm btn-outline-primary"
                                for="size-@product.Id-@size.Id">@size.Name.ToUpper()</label>
                        }
                    </div>                    
                }
                @if (product.Colors!.Count > 0)
                {
                    foreach(var color in product.Colors)
                    {
                        <div class="btn-group mx-2" role="group" aria-label="Basic radio toggle button group">
                            <input type="radio" class="btn-check" name="color-@product.Id-@color.Id" id="color-@product.Id-@color.Id"
                                   autocomplete="off" @onclick="() => OnColorClick(product, color)">
                            <label class="btn btn-sm btn-outline-primary"
                                   style="background-color:#@color.BGColor; color:#@(color.IsSelected ? color.TextColor : color.BGColor)"
                               for="color-@product.Id-@color.Id"><i class="bi-check"></i></label>
                        </div>                      
                    }
                }

                <button class="btn btn-sm btn-success" @onclick="() => AddToCart(product)"><i class="bi-cart"></i></button> @* () => talar om att det är en eventfunktion som ska köra AddToCart*@
            </div>

        </div>
    }
</section>

@code {
    [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; } //publisher

    void OnColorClick(ProductGetDTO product, ColorGetDTO color)
    {
        product.Colors!.ForEach(c => c.IsSelected = false);
        color.IsSelected = true;
    }

    void OnSizeClick(ProductGetDTO product, SizeGetDTO size)
    {
        product.Sizes!.ForEach(s => s.IsSelected = false);
        size.IsSelected = true;
    }

    /*void OnColorClick1(int productId, int colorId)
        {
        var product = Service!.Products.Single(p => p.Id == productId);
        product.Colors!.ForEach(c => c.IsSelected = false);
        var color = product.Colors.Single(c => c.Id == colorId);
        color.IsSelected = true;
    }*/


    async Task AddToCart(ProductGetDTO product)
    {
        //TODO: Spara flera produkter till shopping cart
        //TODO: Visa produkterna i shopping carten
        //TODO: Ta bort produkt från shopping cart
        var cartItem = mapper.Map<CartItemDTO>(product);  // konverterar produkten till CartItemDTO
        cartItem.Color = product.Colors!.FirstOrDefault(c => c.IsSelected); //hämtar ut den valda färgen av produkten
        cartItem.Size = product.Sizes!.FirstOrDefault(s => s.IsSelected);
        Service!.CartItems.Add(cartItem); //tar list-property från UIService för kundvagnen
        await Service!.SaveToStorage("CartItems", Service!.CartItems); //sparar listan Service!.CartItems i storage

            if (OnChange.HasDelegate) //Ser om det finns någon metod som prenumererar på eventet
                 await OnChange.InvokeAsync(); //om det finns prenumerant ska den triggas igång

        //await Storage.SetAsync("MyKey", product);  //Sparar produkt man valt i kundvagnen
        //await Service!.SaveToStorage("MyKey", product); //Sparar undan nyckeln och produkten i LocalStorage

        //var prod = await Storage.GetAsync<ProductGetDTO>("MyKey"); //Hämtar produkt i kundvagn som sparats i LocalStorage även efter applikationen stängs
            //var prod = await Service!.ReadSingleStorage<ProductGetDTO>("MyKey"); //hämtar en produkt från nyckeln vi anger


            //await Storage.RemoveAsync("MyKey");  //Tar bort produkt i kundvagn
            //await Service!.RemoveFromStorage("MyKey"); //

            //var product = Service!.Products.Single(p => p.Id == id);
} 
     }
